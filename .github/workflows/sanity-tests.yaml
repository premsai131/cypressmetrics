name: Run Tests
on:
  workflow_dispatch:
    inputs:
      config-file:
        type: string
        description: "Config file name"
        required: true
      branch:
        type: string
        description: "Branch on which tests are to run"
        required: false
      trigger-event:
        type: string
        description: "Event that triggered the workflow. Optional"
        required: false
      service-name:
        type: string
        description: "Service name. Optional"
        required: false

jobs:
  read-regions:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.workspace }}/src/github.com/${{ github.repository }}
    outputs:
      regions: ${{ steps.read-regions.outputs.regions }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: ${{ github.workspace }}/src/github.com/${{ github.repository }}
          ref: ${{ inputs.branch || github.event.pull_request.head.ref }}

      - name: Debug Paths & List Files
        run: |
          echo "Workspace Path: ${{ github.workspace }}"
          echo "Checking files in .github/workflows directory"
          ls -alR ${{ github.workspace }}/src/github.com/${{ github.repository }}/.github/workflows || echo "No files found"

      - name: Filter YAML for fintech service or use default config
        run: |
          set -e  # Exit if any command fails
          
          CONFIG_PATH="${{ github.workspace }}/src/github.com/${{ github.repository }}/.github/workflows/sanityconfig.yml"
          MODIFIED_CONFIG_PATH="${{ github.workspace }}/src/github.com/${{ github.repository }}/.github/workflows/modified_sanityconfig.yml"
          
          echo "Checking if yq is installed..."
          yq --version || { echo "yq not found!"; exit 1; }
          
          echo "Original Config Path: $CONFIG_PATH"
          echo "Modified Config Path: $MODIFIED_CONFIG_PATH"

          if [[ "${{ github.repository }}" == *"fintech-service"* ]]; then
            echo "Applying fintech filter..."
            yq '.regions |= map(select(.fintech_deployed == true))' "$CONFIG_PATH" > "$MODIFIED_CONFIG_PATH" || { echo "yq command failed!"; exit 1; }
          else
            echo "Copying default config..."
            cp "$CONFIG_PATH" "$MODIFIED_CONFIG_PATH" || { echo "cp command failed!"; exit 1; }
          fi

          echo "Verifying modified config file existence..."
          ls -al "$MODIFIED_CONFIG_PATH" || { echo "Modified config file not found!"; exit 1; }

      - name: Read Region Details
        id: read-regions
        run: |
          set -e  # Exit if any command fails

          CONFIG_PATH="${{ github.workspace }}/src/github.com/${{ github.repository }}/.github/workflows/modified_sanityconfig.yml"
          
          echo "Checking if modified config file exists..."
          if [[ ! -f "$CONFIG_PATH" ]]; then
            echo "Error: $CONFIG_PATH does not exist!"
            exit 1
          fi

          echo "Checking if jq is installed..."
          jq --version || { echo "jq not found!"; exit 1; }

          echo "Reading regions from YAML..."
          regions=$(yq '.regions' "$CONFIG_PATH" -o json | jq -r tostring)

          echo "regions=$regions" >> $GITHUB_OUTPUT
          echo "Regions extracted: $regions"

  run-tests:
    runs-on: ubuntu-latest
    needs: read-regions
    strategy:
      matrix:
        region: ${{ fromJson(needs.read-regions.outputs.regions) }}
        go-version: [1.21.x]
      fail-fast: false
    env:
      GOPATH: ${{ github.workspace }}
      GOBIN: ${{ github.workspace }}/bin
      BUILD_NUMBER: ${{ github.run_number }}
      BACKEND_SECRETS_FILE: ${{ secrets[format('{0}', inputs.config-file)] }}
    defaults:
      run:
        working-directory: ${{ env.GOPATH }}/src/github.com/${{ github.repository }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: ${{ env.GOPATH }}/src/github.com/${{ github.repository }}
          ref: ${{ inputs.branch || github.event.pull_request.head.ref }}

      - name: Add Region Details in Config File
        run: |
          echo "Adding region details to config.yaml"
          printf "\nWORKSPACEID: ${{matrix.region.workspace_id}}" >> ${GITHUB_WORKSPACE}/config.yaml
          printf "\nPDBADDRESS: ${{matrix.region.data_plane_url}}" >> ${GITHUB_WORKSPACE}/config.yaml
          printf "\nVAULTID: ${{matrix.region.vault_id}}" >> ${GITHUB_WORKSPACE}/config.yaml
          printf "\nFUNCTION_DEPLOYED: ${{matrix.region.functions_deployed}}" >> ${GITHUB_WORKSPACE}/config.yaml
          printf "\nFINTECH_DEPLOYED: ${{matrix.region.fintech_deployed}}" >> ${GITHUB_WORKSPACE}/config.yaml

      - name: Parse Test Results & Extract Metrics
        if: always()
        id: extract
        run: |
          export MATRIX_CONTAINER=${{ matrix.region.workspace_id }}  # Export for shell script
          chmod +x scripts/test_results_handler.sh  # No need to specify the full path
          scripts/test_results_handler.sh true  # Relative path
        env:
          MATRIX_CONTAINER: ${{ matrix.region.workspace_id }}  # Explicitly set for subprocesses

      - name: Debug - List files in the directory
        if: always() 
        run: |
          echo "Listing files in the current directory..."
          ls -alh 

      - name: Debug- Print Current Directory
        run: pwd

      - name: Upload Test Results as Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.region.workspace_id }}
          path: ${{ env.GOPATH }}/src/github.com/${{ github.repository }}/test_results_${{ matrix.region.workspace_id }}.json



  process-results:
    if: always() 
    name: Process Test Results
    runs-on: ubuntu-latest
    needs: run-tests  
    env:
      GOPATH: ${{ github.workspace }}
    outputs:
      TEST_STATUS: ${{ steps.process.outputs.TEST_STATUS }}
      TOTAL_TESTS: ${{ steps.process.outputs.TOTAL_TESTS }}
      FAILED_TESTS: ${{ steps.process.outputs.FAILED_TESTS }}
      PASSED_TESTS: ${{ steps.process.outputs.PASSED_TESTS }}
    defaults:
      run:
        working-directory: ${{ env.GOPATH }}/src/github.com/${{ github.repository }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: ${{ github.workspace }}/src/github.com/${{ github.repository }}
          ref: ${{ inputs.branch || github.event.pull_request.head.ref }}
  
      - name: Download All Test Result Artifacts
        uses: actions/download-artifact@v4
        with:
          path: test_results  # All artifacts will be downloaded to this folder
  
      - name: Debug Working Directory
        run: |
          echo "Current working directory:"
          pwd
          echo "Listing all files in the current directory:"
          ls -alh
          echo "Listing all files inside test_results if it exists:"
          ls -alh test_results || echo "test_results directory not found"
          echo "Finding all test-results-*.json files:"
          find . -type f -name "test-results-*.json" || echo "No test result files found"
      
      - name: Process Test Results
        id: process
        run: |
          echo "Changing file permissions for the script..."
          chmod +x ./scripts/process_sanity_test_results.sh
          echo "Running the process script..."
          ./scripts/process_sanity_test_results.sh

  
      - name: Set Job Outputs
        run: |
          echo "TEST_STATUS=${{ env.test_status }}" >> $GITHUB_OUTPUT
          echo "TOTAL_TESTS=${{ env.total_tests }}" >> $GITHUB_OUTPUT
          echo "PASSED_TESTS=${{ env.total_passed }}" >> $GITHUB_OUTPUT
          echo "FAILED_TESTS=${{ env.total_failed }}" >> $GITHUB_OUTPUT

  call-pdt-metrics:
    if: always() 
    needs: process-results
    runs-on: ubuntu-latest
    steps:
      - name: Print Test Metrics
        run: |
          echo "TEST STATUS: ${{ needs.process-results.outputs.TEST_STATUS }}"
          echo "TOTAL TESTS: ${{ needs.process-results.outputs.TOTAL_TESTS }}"
          echo "FAILED TESTS: ${{ needs.process-results.outputs.FAILED_TESTS }}"
          echo "PASSED TESTS: ${{ needs.process-results.outputs.PASSED_TESTS }}"
